{
  "name": "Daily News Topic Tracker for Brent",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 8,
              "triggerAtMinute": 1
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -3420,
        360
      ],
      "id": "c39f971f-111b-45ff-810e-804067c4dc6b",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "app42MWoBdW4bj8Ba",
          "mode": "list",
          "cachedResultName": "Brents World",
          "cachedResultUrl": "https://airtable.com/app42MWoBdW4bj8Ba"
        },
        "table": {
          "__rl": true,
          "value": "tbl0UGDeOm5zulwqA",
          "mode": "list",
          "cachedResultName": "Topics to Monitor",
          "cachedResultUrl": "https://airtable.com/app42MWoBdW4bj8Ba/tbl0UGDeOm5zulwqA"
        },
        "returnAll": "={{ true }}",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -3200,
        360
      ],
      "id": "40d6ade9-9c2d-4e55-ab63-ad27f729955b",
      "name": "Airtable1",
      "credentials": {
        "airtableTokenApi": {
          "id": "xkPz2bkNdniT6QGt",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://newsapi.org/v2/everything?domains=wsj.com&apiKey=4a949abb8b1d470396b36b5e995e782b",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2980,
        960
      ],
      "id": "ca225c63-5d97-45a5-966c-1120bf3e8b3f",
      "name": "WSJ_past_6_months_api",
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://news.google.com/rss/search?q=from:reuters.com&hl=en-US&gl=US&ceid=US:en",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2980,
        -40
      ],
      "id": "0c6cf3f8-12fc-4848-87bd-535389ea9a55",
      "name": "Google_News_RSS"
    },
    {
      "parameters": {
        "url": "http://rss.cnn.com/rss/edition.rss",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2980,
        -240
      ],
      "id": "0181fa4b-5569-4613-8322-c504a02137d0",
      "name": "CNN_RSS"
    },
    {
      "parameters": {
        "url": "https://www.nytimes.com/rss",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2980,
        160
      ],
      "id": "e539e124-8d26-42f8-bed6-e0aecbaccce0",
      "name": "NyTimes_RSS"
    },
    {
      "parameters": {
        "url": "https://www.theguardian.com/international/rss",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2980,
        360
      ],
      "id": "970de9a1-f714-4c0b-8a51-212cb7eae802",
      "name": "Guardian_RSS"
    },
    {
      "parameters": {
        "url": "https://newsapi.org/v2/top-headlines?country=us&category=business&apiKey=4a949abb8b1d470396b36b5e995e782b",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2980,
        760
      ],
      "id": "cf36f9db-3335-43f7-b294-050a24251bfa",
      "name": "NewsApi_Headlines_api",
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://api.polygon.io/v3/reference/dividends",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "apiKey",
              "value": "y2rKGr5UfxmMHuRjkfvXdRWipQ6zJXYp"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2980,
        560
      ],
      "id": "845df849-9ee9-43e7-802f-f65f3453f0cc",
      "name": "polygon_api",
      "disabled": true
    },
    {
      "parameters": {
        "numberInputs": 7
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -2760,
        276
      ],
      "id": "0dcbe587-c33f-452d-82e0-ba667db1d1b7",
      "name": "Merge Articles"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Analyze this news article and extract key information for monitoring emerging trends and developments.\n\n**Article Details:**\n- Title: {{$json.title}}\n- Description: {{$json.description}} \n- Source: {{$json.source}}\n- URL: {{$json.url}}\n- Date Found: {{new Date().toISOString().split('T')[0]}}\n\n**Analysis Requirements:**\n\n1. **Summary**: Write a concise 2-3 sentence summary (max 100 words) focusing on the key development, innovation, or trend described.\n\n2. **Topic Tags**: Assign 2-4 specific topic tags from this list based on the article content:\n   - \"home automation\"\n   - \"smart devices\" \n   - \"IoT sensors\"\n   - \"voice assistants\"\n   - \"smart lighting\"\n   - \"security systems\"\n   - \"energy management\"\n   - \"smart appliances\"\n   - \"connectivity protocols\"\n   - \"AI integration\"\n   - \"mobile apps\"\n   - \"cloud platforms\"\n   - \"privacy concerns\"\n   - \"market trends\"\n   - \"product launches\"\n   - \"partnerships\"\n   - \"funding/investments\"\n   - \"regulations\"\n   - \"consumer adoption\"\n   - \"technical standards\"\n\n3. **Development Status**: Choose the most appropriate status:\n   - \"announced\" - New product/feature/initiative announced\n   - \"in progress\" - Active development or rollout\n   - \"completed\" - Released, launched, or finished\n   - \"delayed\" - Postponed or behind schedule\n   - \"proposed\" - Concept or proposal stage\n   - \"acquired\" - Company/technology acquisition\n   - \"partnership\" - Strategic partnership or collaboration\n   - \"funding\" - Investment or funding round\n   - \"regulatory\" - Government or industry regulation\n   - \"unknown\" - Status unclear from article\n\n4. **Significance Level**: Rate the importance (1-5 scale):\n   - 5: Major breakthrough or industry-changing development\n   - 4: Significant advancement or large company move\n   - 3: Notable development or medium impact\n   - 2: Minor update or small company news\n   - 1: Routine announcement or maintenance update\n\n**Response Format (JSON only):**\n```json\n{\n  \"summary\": \"Your 2-3 sentence summary here\",\n  \"tags\": [\"tag1\", \"tag2\", \"tag3\"],\n  \"status\": \"status_here\",\n  \"significance\": 3,\n  \"key_entities\": [\"company1\", \"product2\", \"technology3\"],\n  \"date_processed\": \"{{new Date().toISOString()}}\"\n}\nRespond with only the JSON object, no additional text.\n\n## OpenRouter Node Settings\n\n**Model Configuration:**\n- **Model**: `gpt-4o-mini` (cost-effective) or `gpt-4o` (higher quality)\n- **Temperature**: `0.2` (for consistent, structured output)\n- **Max Tokens**: `300`\n- **Top P**: `0.9`\n\n**Input/Output:**\n- **Input Type**: Single item processing\n- **Output Parsing**: JSON mode (if available)\n\n## Post-Processing Code Node (Required)\n\nAdd this code node after OpenRouter to clean, validate, and enrich the response with complete metadata:\n\n```javascript\nreturn items.map(item => {\n  const originalArticle = item.json;\n  let aiResponse;\n  \n  try {\n    // Extract AI response from OpenRouter output\n    const responseText = originalArticle.choices?.[0]?.message?.content || \n                        originalArticle.response || \n                        originalArticle.text;\n    \n    // Parse JSON response\n    aiResponse = JSON.parse(responseText);\n    \n    // Validate required fields\n    if (!aiResponse.summary || !aiResponse.tags || !aiResponse.status) {\n      throw new Error('Missing required fields in AI response');\n    }\n    \n  } catch (error) {\n    // Fallback for parsing errors\n    console.log('AI Response parsing failed:', error.message);\n    aiResponse = {\n      summary: \"Processing failed - manual review needed\",\n      tags: [\"processing_error\"],\n      status: \"unknown\",\n      significance: 1,\n      key_entities: [],\n      error: error.message\n    };\n  }\n  \n  // Helper function for week number calculation\n  function getWeekNumber(date) {\n    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n    const pastDaysOfYear = (date - firstDayOfYear) / 86400000;\n    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n  }\n  \n  // Helper function to extract source domain\n  function extractDomain(url) {\n    try {\n      return new URL(url).hostname.replace('www.', '');\n    } catch {\n      return 'unknown-domain';\n    }\n  }\n  \n  const now = new Date();\n  const publishedDate = originalArticle.published_date ? new Date(originalArticle.published_date) : now;\n  \n  // Combine original article with AI analysis and comprehensive metadata\n  return {\n    json: {\n      // Core Article Data\n      title: originalArticle.title || 'Untitled',\n      description: originalArticle.description || '',\n      url: originalArticle.url || '',\n      source_name: originalArticle.source || 'Unknown Source',\n      source_domain: extractDomain(originalArticle.url || ''),\n      \n      // Dates\n      published_date: originalArticle.published_date || now.toISOString(),\n      date_found: now.toISOString().split('T')[0],\n      published_year: publishedDate.getFullYear(),\n      published_month: publishedDate.getMonth() + 1,\n      published_day: publishedDate.getDate(),\n      \n      // AI-Generated Analysis\n      ai_summary: aiResponse.summary,\n      ai_tags: Array.isArray(aiResponse.tags) ? aiResponse.tags.join(', ') : aiResponse.tags,\n      ai_tags_array: Array.isArray(aiResponse.tags) ? aiResponse.tags : [aiResponse.tags],\n      ai_status: aiResponse.status,\n      ai_significance: aiResponse.significance || 3,\n      ai_entities: Array.isArray(aiResponse.key_entities) ? aiResponse.key_entities.join(', ') : '',\n      ai_entities_array: Array.isArray(aiResponse.key_entities) ? aiResponse.key_entities : [],\n      \n      // Processing Metadata\n      processed_at: now.toISOString(),\n      processed_date: now.toISOString().split('T')[0],\n      processed_year: now.getFullYear(),\n      processed_month: now.getMonth() + 1,\n      processed_week: getWeekNumber(now),\n      workflow_id: $workflow.id,\n      execution_id: $execution.id,\n      processing_version: \"1.0\",\n      ai_model: \"gpt-4o-mini\",\n      \n      // Content Metadata for Search & Filtering\n      title_length: (originalArticle.title || '').length,\n      description_length: (originalArticle.description || '').length,\n      total_content_length: ((originalArticle.title || '') + (originalArticle.description || '')).length,\n      word_count: ((originalArticle.title || '') + ' ' + (originalArticle.description || '')).split(/\\s+/).filter(word => word.length > 0).length,\n      \n      // Quality & Status Flags\n      has_complete_data: !!(originalArticle.title && originalArticle.description && originalArticle.url),\n      ai_processing_success: aiResponse.summary !== \"Processing failed - manual review needed\",\n      requires_manual_review: aiResponse.significance >= 4 || aiResponse.status === \"unknown\" || aiResponse.summary.includes(\"Processing failed\"),\n      is_high_significance: aiResponse.significance >= 4,\n      \n      // Categorization Metadata\n      monitoring_category: \"technology_trends\", // Adjust based on your focus\n      content_type: originalArticle.source?.includes('blog') ? 'blog' : 'news',\n      language: \"en\", // Adjust if processing multiple languages\n      \n      // Search Enhancement Fields\n      searchable_text: `${originalArticle.title || ''} ${originalArticle.description || ''} ${aiResponse.summary} ${Array.isArray(aiResponse.tags) ? aiResponse.tags.join(' ') : aiResponse.tags}`.toLowerCase(),\n      tag_count: Array.isArray(aiResponse.tags) ? aiResponse.tags.length : 1,\n      entity_count: Array.isArray(aiResponse.key_entities) ? aiResponse.key_entities.length : 0,\n      \n      // Time-based Filtering Fields\n      days_since_published: Math.floor((now - publishedDate) / (1000 * 60 * 60 * 24)),\n      is_recent: Math.floor((now - publishedDate) / (1000 * 60 * 60 * 24)) <= 7,\n      quarter: Math.ceil((publishedDate.getMonth() + 1) / 3),\n      \n      // Error Handling\n      processing_errors: aiResponse.error || null,\n      data_quality_score: calculateQualityScore(originalArticle, aiResponse)\n    }\n  };\n  \n  // Helper function to calculate data quality score (1-10)\n  function calculateQualityScore(article, ai) {\n    let score = 0;\n    \n    // Title quality (0-2 points)\n    if (article.title && article.title.length > 10) score += 2;\n    else if (article.title) score += 1;\n    \n    // Description quality (0-3 points)\n    if (article.description && article.description.length > 100) score += 3;\n    else if (article.description && article.description.length > 50) score += 2;\n    else if (article.description) score += 1;\n    \n    // URL validity (0-1 point)\n    if (article.url && article.url.startsWith('http')) score += 1;\n    \n    // Source quality (0-1 point)\n    if (article.source && article.source !== 'Unknown Source') score += 1;\n    \n    // AI processing quality (0-3 points)\n    if (ai.summary && ai.summary.length > 20) score += 1;\n    if (ai.tags && Array.isArray(ai.tags) && ai.tags.length > 0) score += 1;\n    if (ai.status && ai.status !== 'unknown') score += 1;\n    \n    return score;\n  }\n});\nExpected Output Structure\nAfter this step, each article will have this enriched structure:\njson{\n  \"title\": \"Smart Home Device X Launches with New AI Features\",\n  \"description\": \"Company announces breakthrough in voice recognition...\",\n  \"url\": \"https://example.com/article\",\n  \"source\": \"TechCrunch\",\n  \"date_found\": \"2025-06-08\",\n  \"ai_summary\": \"Company X released a new smart home device featuring advanced AI voice recognition that can understand natural language commands and learn user preferences over time.\",\n  \"ai_tags\": [\"smart devices\", \"AI integration\", \"voice assistants\"],\n  \"ai_status\": \"announced\",\n  \"ai_significance\": 4,\n  \"ai_entities\": [\"Company X\", \"Smart Device Y\", \"AI Voice Tech\"],\n  \"processed_at\": \"2025-06-08T15:30:00.000Z\",\n  \"workflow_version\": \"1.0\"\n}\nInclude the original article data in your response:\n{\n  \"title\": \"{{$json.title}}\",\n  \"source\": \"{{$json.source}}\",\n  \"url\": \"{{$json.url}}\",\n  \"author\": \"{{$json.author}}\",\n  \"published_date\": \"{{$json.published_date}}\",\n  \"summary\": \"Your AI summary here\",\n  \"tags\": [\"tag1\", \"tag2\"],\n  \"status\": \"status_here\",\n  \"significance\": 3,\n  \"key_entities\": [\"entity1\", \"entity2\"]\n}",
        "batching": {
          "delayBetweenBatches": "={{ 0 }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -2320,
        360
      ],
      "id": "6b9a8df2-84aa-4014-884d-a7b5593fa95e",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {
          "maxTokens": 300,
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -2232,
        580
      ],
      "id": "1ee70216-777c-42ec-8e91-55b886d15e12",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "AgnQ41KjU7NganoE",
          "name": "OpenRouter account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return items.map((item, index) => {\n  console.log(`=== NORMALIZING ITEM ${index} ===`);\n  console.log('Raw article data:', JSON.stringify(item.json, null, 2));\n  \n  const article = item.json;\n  \n  // Extract with better error handling\n  const title = (article.title || \n                article.headline || \n                article.name || \n                '').trim();\n                \n  const description = (article.description || \n                      article.body || \n                      article.snippet || \n                      article.summary ||\n                      article.content || \n                      '').trim();\n                      \n  const url = (article.url || \n               article.uri || \n               article.webUrl || \n               article.link || \n               '').trim();\n               \n  const source = (article.source?.name || \n                 article.source || \n                 article.publisher || \n                 'Unknown Source').trim();\n\n  console.log(`Item ${index} extracted:`, {\n    title: title,\n    description: description ? description.substring(0, 100) + '...' : 'NO DESCRIPTION',\n    url: url,\n    source: source\n  });\n  \n  // Only return if we have minimum required data\n  if (!title || !description) {\n    console.log(`⚠️ Item ${index} missing required data - skipping`);\n    return null; // This will filter out bad records\n  }\n  \n  return {\n    json: {\n      title: title,\n      description: description,\n      url: url,\n      source: source,\n      published_date: article.published_date || article.pubDate || new Date().toISOString(),\n      author: article.author || '',\n      item_index: index // For debugging\n    }\n  };\n}).filter(item => item !== null); // Remove null items"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2540,
        360
      ],
      "id": "afc2de63-0b58-4086-b82c-8b1e9077cc4f",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "app42MWoBdW4bj8Ba",
          "mode": "list",
          "cachedResultName": "Brents World",
          "cachedResultUrl": "https://airtable.com/app42MWoBdW4bj8Ba"
        },
        "table": {
          "__rl": true,
          "value": "tblil2WC8McQ9MPmQ",
          "mode": "list",
          "cachedResultName": "Articles Table",
          "cachedResultUrl": "https://airtable.com/app42MWoBdW4bj8Ba/tblil2WC8McQ9MPmQ"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Title": "={{ $json.title }}",
            "Summary": "={{ $json.summary }}",
            "Source": "={{ $json.source }}",
            "Publication Date": "={{ $json.publication_date }}",
            "Ai Tags": "={{ $json.ai_tags }}",
            "Processed At": "={{ $json.processed_at }}",
            "URL": "={{ $json.url }}",
            "Date Found": "={{ $json.date_found }}",
            "Author": "={{ $json.author }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Summary",
              "displayName": "Summary",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Source",
              "displayName": "Source",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "URL",
              "displayName": "URL",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "Todo",
                  "value": "Todo"
                },
                {
                  "name": "In progress",
                  "value": "In progress"
                },
                {
                  "name": "Done",
                  "value": "Done"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Publication Date",
              "displayName": "Publication Date",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Ai Tags",
              "displayName": "Ai Tags",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Processed At",
              "displayName": "Processed At",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Date Found",
              "displayName": "Date Found",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "dateTime",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Author",
              "displayName": "Author",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Has Complete Data",
              "displayName": "Has Complete Data",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Requires Review",
              "displayName": "Requires Review",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "boolean",
              "readOnly": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -1724,
        360
      ],
      "id": "070fd32f-0f81-4b77-aaed-b18386142f6d",
      "name": "Airtable2",
      "notesInFlow": false,
      "credentials": {
        "airtableTokenApi": {
          "id": "xkPz2bkNdniT6QGt",
          "name": "Airtable Personal Access Token account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "return items.map((item, index) => {\n  console.log(`=== PROCESSING LLM OUTPUT ${index} ===`);\n  \n  const data = item.json;\n  \n  // Extract AI response with better error handling\n  let aiResponse;\n  try {\n    // Handle different response structures from LLM\n    let responseText = data.text || data.response || data.choices?.[0]?.message?.content || '';\n    \n    // Clean up JSON formatting\n    if (responseText.includes('```json')) {\n      responseText = responseText.replace(/```json\\n?/g, '').replace(/\\n?```/g, '');\n    }\n    \n    // Remove any text before/after JSON\n    const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      responseText = jsonMatch[0];\n    }\n    \n    aiResponse = JSON.parse(responseText.trim());\n    console.log(`✅ Successfully parsed AI response for item ${index}`);\n  } catch (error) {\n    console.log(`❌ Failed to parse AI response for item ${index}:`, error.message);\n    console.log('Raw response:', data.text);\n    aiResponse = {\n      summary: \"AI processing failed - manual review needed\",\n      tags: [\"processing_error\"],\n      status: \"unknown\",\n      significance: 1,\n      key_entities: [],\n      error: error.message\n    };\n  }\n  \n  // Extract original article data with fallbacks\n  const originalTitle = data.title || aiResponse.title || `Article ${index}`;\n  const originalSource = data.source || aiResponse.source || \"Unknown Source\";\n  const originalUrl = data.url || aiResponse.url || \"\";\n  const originalDescription = data.description || \"\";\n  const publishedDate = data.published_date || aiResponse.published_date || new Date().toISOString();\n  \n  console.log(`Item ${index} extracted data:`, {\n    title: originalTitle.substring(0, 50) + '...',\n    source: originalSource,\n    hasAISummary: !!aiResponse.summary,\n    aiTags: aiResponse.tags\n  });\n  \n  const now = new Date();\n  \n  // Helper functions\n  function extractDomain(url) {\n    try {\n      return new URL(url).hostname.replace('www.', '');\n    } catch {\n      return 'unknown-domain';\n    }\n  }\n  \n  function getWeekNumber(date) {\n    const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n    const pastDaysOfYear = (date - firstDayOfYear) / 86400000;\n    return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n  }\n  \n  // Ensure all fields are strings or appropriate types for Airtable\n  const processedItem = {\n    json: {\n      // Core Article Data (Text fields)\n      title: String(originalTitle || 'Untitled'),\n      description: String(originalDescription || aiResponse.summary || 'No description available'),\n      url: String(originalUrl || ''),\n      source_name: String(originalSource || 'Unknown Source'),\n      source_domain: String(extractDomain(originalUrl)),\n      author: String(data.author || aiResponse.author || ''),\n      \n      // AI Analysis (Text fields)\n      ai_summary: String(aiResponse.summary || 'No summary generated'),\n      ai_tags: Array.isArray(aiResponse.tags) ? aiResponse.tags.join(', ') : String(aiResponse.tags || ''),\n      ai_status: String(aiResponse.status || 'unknown'),\n      ai_entities: Array.isArray(aiResponse.key_entities) ? aiResponse.key_entities.join(', ') : '',\n      \n      // Numeric fields (ensure they're numbers)\n      ai_significance: Number(aiResponse.significance || 3),\n      \n      // Date fields (ISO strings)\n      published_date: publishedDate,\n      date_found: now.toISOString().split('T')[0],\n      processed_at: now.toISOString(),\n      \n      // Date components (Numbers)\n      published_year: new Date(publishedDate).getFullYear(),\n      published_month: new Date(publishedDate).getMonth() + 1,\n      published_day: new Date(publishedDate).getDate(),\n      processed_week: getWeekNumber(now),\n      \n      // Boolean fields (ensure they're booleans)\n      has_complete_data: Boolean(originalTitle && aiResponse.summary && originalUrl),\n      ai_processing_success: Boolean(aiResponse.summary && aiResponse.summary !== \"AI processing failed - manual review needed\"),\n      requires_manual_review: Boolean(aiResponse.significance >= 4 || aiResponse.status === 'unknown' || aiResponse.error),\n      is_high_significance: Boolean(aiResponse.significance >= 4),\n      \n      // Metadata (Text fields)\n      workflow_id: String($workflow.id || 'unknown'),\n      execution_id: String($execution.id || 'unknown'),\n      processing_version: \"1.0\",\n      ai_model: \"gpt-4o-mini\",\n      \n      // Additional helpful fields\n      searchable_text: String(`${originalTitle} ${originalDescription} ${aiResponse.summary || ''} ${aiResponse.tags || ''}`).toLowerCase(),\n      tag_count: Array.isArray(aiResponse.tags) ? aiResponse.tags.length : 0,\n      entity_count: Array.isArray(aiResponse.key_entities) ? aiResponse.key_entities.length : 0,\n      processing_errors: aiResponse.error ? String(aiResponse.error) : null,\n      \n      // Debug info\n      debug_item_index: index,\n      debug_has_url: Boolean(originalUrl),\n      debug_has_title: Boolean(originalTitle && originalTitle !== 'Untitled')\n    }\n  };\n  \n  console.log(`✅ Item ${index} processed successfully`);\n  return processedItem;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1944,
        360
      ],
      "id": "50c8e257-3366-47df-8282-1a1b89f473e2",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// Error Handler Node\nconst results = items.map((item, index) => {\n  const success = !item.error;\n  \n  if (!success) {\n    console.log(`❌ Airtable error for item ${index}:`, item.error);\n    return {\n      json: {\n        index: index,\n        title: item.json.title || 'Unknown',\n        error: item.error.message || 'Unknown error',\n        status: 'failed',\n        timestamp: new Date().toISOString()\n      }\n    };\n  }\n  \n  return {\n    json: {\n      index: index,\n      title: item.json.title,\n      airtable_id: item.json.id,\n      status: 'success',\n      timestamp: new Date().toISOString()\n    }\n  };\n});\n\nconsole.log(`Processed ${results.length} items`);\nconsole.log(`Success: ${results.filter(r => r.json.status === 'success').length}`);\nconsole.log(`Failed: ${results.filter(r => r.json.status === 'failed').length}`);\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3420,
        1220
      ],
      "id": "356da35d-73d8-4b51-a3ad-0c7a002b8cdd",
      "name": "Code2",
      "alwaysOutputData": false,
      "notesInFlow": false,
      "disabled": true
    },
    {
      "parameters": {
        "content": "READ ME!\n\nNews Topic Tracker runs once daily every morning.  Intervals can be changed by editing inputs in the Schedule Trigger Node.\n\nTopics can be updated in the Daily News Topic Tracker Airtable.  If updated after the scheduled morning daily run one must re run the workflow for updated results pertaining to updated topics.\n\n\n\n",
        "height": 300,
        "width": 400,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3600,
        -120
      ],
      "typeVersion": 1,
      "id": "ab626b07-a3f2-4276-bd8d-4ca156ccf08f",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Airtable1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable1": {
      "main": [
        [
          {
            "node": "Guardian_RSS",
            "type": "main",
            "index": 0
          },
          {
            "node": "CNN_RSS",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google_News_RSS",
            "type": "main",
            "index": 0
          },
          {
            "node": "NyTimes_RSS",
            "type": "main",
            "index": 0
          },
          {
            "node": "WSJ_past_6_months_api",
            "type": "main",
            "index": 0
          },
          {
            "node": "NewsApi_Headlines_api",
            "type": "main",
            "index": 0
          },
          {
            "node": "polygon_api",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardian_RSS": {
      "main": [
        [
          {
            "node": "Merge Articles",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "WSJ_past_6_months_api": {
      "main": [
        [
          {
            "node": "Merge Articles",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "NewsApi_Headlines_api": {
      "main": [
        [
          {
            "node": "Merge Articles",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "CNN_RSS": {
      "main": [
        [
          {
            "node": "Merge Articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google_News_RSS": {
      "main": [
        [
          {
            "node": "Merge Articles",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "NyTimes_RSS": {
      "main": [
        [
          {
            "node": "Merge Articles",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "polygon_api": {
      "main": [
        [
          {
            "node": "Merge Articles",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "Merge Articles": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Airtable2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable2": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9f32e175-5f6b-4b27-9b2c-c273a1d750f2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "12f0b111963f9c1d47dd91686370921753fd90a2637cdc21072d52f29ded2849"
  },
  "id": "yX8WLsTpmzJrnbF6",
  "tags": []
}